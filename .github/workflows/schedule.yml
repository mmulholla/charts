name: Check Software Version
true:
  schedule:
  - cron: '0 0 * * * '
  workflow_dispatch:
    inputs:
      dry-run:
        default: 'true'
        description: Run tests but do not create issues {true,false}
        required: true
      notify-id:
        default: ''
        description: (Optional) Issue notification {github id}
        required: false
      vendor-type:
        default: all
        description: Vendor type {all,partner,redhat,community}
        required: true
jobs:
  check-chart-verifier:
    name: Check Chart Verifier Version
    runs-on: ubuntu-20.04
    steps:
    - id: get_curr_cv_version
      name: Get current Chart Verifier version
      run: 'QUAY_API=''https://quay.io/api/v1/repository/redhat-certification/chart-verifier/tag/''

        CV_DIGEST=$(curl ${QUAY_API} | jq ''[.tags[] | select(.name == "latest")]
        | .[0].manifest_digest'')

        printf "[INFO] Current Chart Verifier digest: %s\n" ${CV_DIGEST}

        echo "::set-output name=current_cv_digest::${CV_DIGEST}"

        '
      shell: bash
    - name: Checkout software-version branch
      uses: actions/checkout@v2
      with:
        ref: software-version
    - id: get_prev_cv_digest
      name: Read previous Chart Verifier digest
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.chart-verifier.latest-manifest-digest' software-version.yaml
    - id: compare_cv_versions
      name: Compare Chart Verifier versions
      run: "set -euo pipefail\nif [ \"${{ steps.get_curr_cv_version.outputs.current_cv_digest\
        \ }}\" = \"${{ steps.get_prev_cv_digest.outputs.result }}\" ]; then\n  # No\
        \ change in the Chart Verifier image\n  printf \"Chart Verifier has not changed\
        \ since last run: '%s' -> '%s'\\n\" \"${{ steps.get_prev_cv_digest.outputs.result\
        \ }}\" \"${{ steps.get_curr_cv_version.outputs.current_cv_digest }}\"\n  echo\
        \ \"::set-output name=run_tests::false\"\nelse\n  # New Chart Verifier image\
        \ is found\n  printf \"Chart Verifier has changed since last run: '%s' ->\
        \ '%s'\\n\" \"${{ steps.get_prev_cv_digest.outputs.result }}\" \"${{ steps.get_curr_cv_version.outputs.current_cv_digest\
        \ }}\"\n  echo \"::set-output name=run_tests::true\"\nfi\n"
      shell: bash
    - if: 'steps.compare_cv_versions.outputs.run_tests == ''true''

        '
      name: Update software-version.yaml
      uses: mikefarah/yq@master
      with:
        cmd: yq eval -i '.chart-verifier.latest-manifest-digest = ${{ steps.get_curr_cv_version.outputs.current_cv_digest
          }}' 'software-version.yaml'
    - if: 'steps.compare_cv_versions.outputs.run_tests == ''true'' &&

        (github.event_name == ''schedule'' || (github.event_name == ''workflow_dispatch''
        && github.event.inputs.dry-run != ''true''))

        '
      name: Push software-version.yaml
      run: 'COMMIT_MESSAGE=$(printf "software-version.yaml: Update OpenShift version
        from ''%s'' to ''%s''" "${{ steps.get_prev_ocp_version.outputs.result }}"
        "${{ steps.get_curr_cv_version.outputs.current_cv_digest }}")

        git remote -v

        git branch -vv


        git config --global user.name "github-actions[bot]"

        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git commit -am "${COMMIT_MESSAGE}"

        git push

        '
    - if: 'steps.compare_cv_versions.outputs.run_tests == ''true''

        '
      name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_dispatch.ref }}
    - if: 'steps.compare_cv_versions.outputs.run_tests == ''true''

        '
      name: Set up Python 3.x Part 1
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - if: 'steps.compare_cv_versions.outputs.run_tests == ''true''

        '
      name: Set up Python 3.x Part 2
      run: '# set up python

        python3 -m venv ve1

        cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..

        cd scripts && ../ve1/bin/python3 setup.py install && cd ..

        '
    - env:
        BOT_NAME: ${{ secrets.BOT_NAME }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CLUSTER_TOKEN: ${{ secrets.CLUSTER_TOKEN }}
        DRY_RUN: ${{ github.event.inputs.dry-run }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NOTIFY_ID: ${{ github.event.inputs.notify-id }}
        SOFTWARE_NAME: OpenShift
        SOFTWARE_VERSION: ${{ steps.get_curr_cv_version.outputs.current_cv_digest
          }}
        VENDOR_TYPE: ${{ github.event.inputs.vendor-type }}
      if: 'github.event_name == ''workflow_dispatch'' && steps.compare_cv_versions.outputs.run_tests
        == ''true''

        '
      name: (Manual) Run tests on existing charts
      run: 'printf "[INFO] Dry run: ''%s''\n" "${{ env.DRY_RUN }}"

        printf "[INFO] Vendor type: ''%s''\n" "${{ env.VENDOR_TYPE }}"

        printf "[INFO] Notify ID: ''%s''\n" "${{ env.NOTIFY_ID }}"

        printf "[INFO] Software Name: ''%s''\n" "${{ env.SOFTWARE_NAME }}"

        printf "[INFO] Software Version: ''%s''\n" "${{ env.SOFTWARE_VERSION }}"

        ve1/bin/pytest tests/functional/test_submitted_charts.py --log-cli-level=WARNING

        '
    - env:
        BOT_NAME: ${{ secrets.BOT_NAME }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CLUSTER_TOKEN: ${{ secrets.CLUSTER_TOKEN }}
        DRY_RUN: 'true'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NOTIFY_ID: ''
        SOFTWARE_NAME: OpenShift
        SOFTWARE_VERSION: ${{ steps.get_curr_cv_version.outputs.current_cv_digest
          }}
        VENDOR_TYPE: all
      if: 'github.event_name == ''schedule'' && steps.compare_cv_versions.outputs.run_tests
        == ''true''

        '
      name: (Schedule) Run tests on existing charts
      run: 'printf "[INFO] Dry run: ''%s''\n" "${{ env.DRY_RUN }}"

        printf "[INFO] Vendor type: ''%s''\n" "${{ env.VENDOR_TYPE }}"

        printf "[INFO] Notify ID: ''%s''\n" "${{ env.NOTIFY_ID }}"

        printf "[INFO] Software Name: ''%s''\n" "${{ env.SOFTWARE_NAME }}"

        printf "[INFO] Software Version: ''%s''\n" "${{ env.SOFTWARE_VERSION }}"

        ve1/bin/pytest tests/functional/test_submitted_charts.py --log-cli-level=WARNING

        '
  check-ocp:
    name: Check OpenShift Version
    runs-on: ubuntu-20.04
    steps:
    - name: Install oc
      run: 'curl -sLO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz

        tar zxvf openshift-client-linux.tar.gz oc

        '
    - name: Log into OpenShift cluster
      run: 'API_SERVER=$(echo -n ${{ secrets.API_SERVER }} | base64 -d)

        ./oc login --insecure-skip-tls-verify --token=${{ secrets.CLUSTER_TOKEN }}
        --server=${API_SERVER}

        '
      shell: bash
    - id: get_curr_ocp_version
      name: Get current OpenShift version
      run: 'OCP_VERSION=$(./oc version -o json | jq ''.releaseClientVersion'')

        printf "[INFO] Current OCP Version: %s\n" ${OCP_VERSION}

        echo "::set-output name=curr_ocp_version::${OCP_VERSION}"

        '
      shell: bash
    - name: Checkout software-version branch
      uses: actions/checkout@v2
      with:
        ref: software-version
    - id: get_prev_ocp_version
      name: Read previous OpenShift version
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.openshift.release-client-version' software-version.yaml
    - id: compare_ocp_versions
      name: Compare OpenShift versions
      run: "set -euo pipefail\nif [ \"${{ steps.get_curr_ocp_version.outputs.curr_ocp_version\
        \ }}\" = \"${{ steps.get_prev_ocp_version.outputs.result }}\" ]; then\n  #\
        \ No change in the OpenShift version\n  printf \"OpenShift version has not\
        \ changed since last run: '%s' -> '%s'\\n\" \"${{ steps.get_prev_ocp_version.outputs.result\
        \ }}\" \"${{ steps.get_curr_ocp_version.outputs.curr_ocp_version }}\"\n  echo\
        \ \"::set-output name=run_tests::false\"\nelse\n  # New OpenShift version\
        \ is set\n  printf \"OpenShift version has changed since last run: '%s' ->\
        \ '%s'\\n\" \"${{ steps.get_prev_ocp_version.outputs.result }}\" \"${{ steps.get_curr_ocp_version.outputs.curr_ocp_version\
        \ }}\"\n  echo \"::set-output name=run_tests::true\"\nfi\n"
      shell: bash
    - if: 'steps.compare_ocp_versions.outputs.run_tests == ''true''

        '
      name: Update software-version.yaml
      uses: mikefarah/yq@master
      with:
        cmd: yq eval -i '.openshift.release-client-version = ${{ steps.get_curr_ocp_version.outputs.curr_ocp_version
          }}' 'software-version.yaml'
    - if: 'steps.compare_ocp_versions.outputs.run_tests == ''true'' &&

        (github.event_name == ''schedule'' || (github.event_name == ''workflow_dispatch''
        && github.event.inputs.dry-run != ''true''))

        '
      name: Push software-version.yaml
      run: 'COMMIT_MESSAGE=$(printf "software-version.yaml: Update OpenShift version
        from ''%s'' to ''%s''" "${{ steps.get_prev_ocp_version.outputs.result }}"
        "${{ steps.get_curr_ocp_version.outputs.curr_ocp_version }}")

        git remote -v

        git branch -vv


        git config --global user.name "github-actions[bot]"

        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git commit -am "${COMMIT_MESSAGE}"

        git push

        '
    - if: 'steps.compare_ocp_versions.outputs.run_tests == ''true''

        '
      name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_dispatch.ref }}
    - if: 'steps.compare_ocp_versions.outputs.run_tests == ''true''

        '
      name: Set up Python 3.x Part 1
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - if: 'steps.compare_ocp_versions.outputs.run_tests == ''true''

        '
      name: Set up Python 3.x Part 2
      run: '# set up python

        python3 -m venv ve1

        cd scripts && ../ve1/bin/pip3 install -r requirements.txt && cd ..

        cd scripts && ../ve1/bin/python3 setup.py install && cd ..

        '
    - env:
        BOT_NAME: ${{ secrets.BOT_NAME }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CLUSTER_TOKEN: ${{ secrets.CLUSTER_TOKEN }}
        DRY_RUN: ${{ github.event.inputs.dry-run }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NOTIFY_ID: ${{ github.event.inputs.notify-id }}
        SOFTWARE_NAME: OpenShift
        SOFTWARE_VERSION: ${{ steps.get_curr_ocp_version.outputs.curr_ocp_version
          }}
        VENDOR_TYPE: ${{ github.event.inputs.vendor-type }}
      if: 'github.event_name == ''workflow_dispatch'' && steps.compare_ocp_versions.outputs.run_tests
        == ''true''

        '
      name: (Manual) Run tests on existing charts
      run: 'printf "[INFO] Dry run: ''%s''\n" "${{ env.DRY_RUN }}"

        printf "[INFO] Vendor type: ''%s''\n" "${{ env.VENDOR_TYPE }}"

        printf "[INFO] Notify ID: ''%s''\n" "${{ env.NOTIFY_ID }}"

        printf "[INFO] Software Name: ''%s''\n" "${{ env.SOFTWARE_NAME }}"

        printf "[INFO] Software Version: ''%s''\n" "${{ env.SOFTWARE_VERSION }}"

        ve1/bin/pytest tests/functional/test_submitted_charts.py --log-cli-level=WARNING

        '
    - env:
        BOT_NAME: ${{ secrets.BOT_NAME }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CLUSTER_TOKEN: ${{ secrets.CLUSTER_TOKEN }}
        DRY_RUN: 'true'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NOTIFY_ID: ''
        SOFTWARE_NAME: OpenShift
        SOFTWARE_VERSION: ${{ steps.get_curr_ocp_version.outputs.curr_ocp_version
          }}
        VENDOR_TYPE: all
      if: 'github.event_name == ''schedule'' && steps.compare_ocp_versions.outputs.run_tests
        == ''true''

        '
      name: (Schedule) Run tests on existing charts
      run: 'printf "[INFO] Dry run: ''%s''\n" "${{ env.DRY_RUN }}"

        printf "[INFO] Vendor type: ''%s''\n" "${{ env.VENDOR_TYPE }}"

        printf "[INFO] Notify ID: ''%s''\n" "${{ env.NOTIFY_ID }}"

        printf "[INFO] Software Name: ''%s''\n" "${{ env.SOFTWARE_NAME }}"

        printf "[INFO] Software Version: ''%s''\n" "${{ env.SOFTWARE_VERSION }}"

        ve1/bin/pytest tests/functional/test_submitted_charts.py --log-cli-level=WARNING

        '
